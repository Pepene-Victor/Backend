package com.kronsoft.project.test;

import java.math.BigDecimal;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ContextConfiguration;

import com.kronsoft.project.dto.ProductDto;
import com.kronsoft.project.dto.StockDto;
import com.kronsoft.project.exceptions.ProductExistsByIdException;
import com.kronsoft.project.service.ProductService;
import com.kronsoft.project.service.StockService;

@SpringBootTest
@ContextConfiguration
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class StockServiceTest {
	
	public static final String PZN = "80808080";
	public static final String SUPPLIER = "Express Med";
	public static final String PRODUCT_NAME = "PARACETAMOL";
	public static final String STRENGTH = "10 mg";
	public static final String PACKAGE_SIZE = "20";
	public static final String UNIT = "ST";
	
	public static final Long QUANTITY = 200L;
	public static final BigDecimal PRICE = new BigDecimal(30.99);
	
	public static final Long QUANTITY_2 = 100L;
	public static final BigDecimal PRICE_2 = new BigDecimal(99.99);
	
	@Autowired
	private StockService stockService;
	@Autowired
	private ProductService productService;
	
	private StockDto persistedStock;
	public BigDecimal persistedPrice;
	public Long persistedQuantity;
	
	@BeforeAll
	public void createProductTest() throws ProductExistsByIdException {
		ProductDto product = new ProductDto();
		product.setPzn(PZN);
		product.setSupplier(SUPPLIER);
		product.setProductName(PRODUCT_NAME);
		product.setStrength(STRENGTH);
		product.setPackageSize(PACKAGE_SIZE);
		product.setUnit(UNIT);
		
		productService.createProductDto(product);
		
		StockDto stock = new StockDto();
		stock.setPrice(PRICE);
		stock.setQuantity(QUANTITY);
		
		persistedStock = stockService.createStockByProductId(stock, PZN);
		Assertions.assertNotNull(persistedStock);
		updateStockForProduct();
		
	}
	private void updateStockForProduct() {
		persistedPrice = persistedStock.getPrice();
		persistedQuantity = persistedStock.getQuantity();
	}
	@Test
	private void updateStockByProductIdTest() {
		
		persistedStock.setPrice(PRICE_2);
		persistedStock.setQuantity(QUANTITY_2);
		persistedStock = stockService.updateStockByProductId(persistedStock);
		
		Assertions.assertEquals(PRICE_2, persistedStock.getPrice());
		Assertions.assertEquals(QUANTITY_2, persistedStock.getQuantity());
		updateStockForProduct();
	}
	
	@Test
	private void getStockByProductIdTest() {
		
		StockDto stock = stockService.getStockByProductId(PZN);
		Assertions.assertEquals(persistedPrice, stock.getPrice());
		Assertions.assertEquals(persistedQuantity, stock.getQuantity());
	}

}
