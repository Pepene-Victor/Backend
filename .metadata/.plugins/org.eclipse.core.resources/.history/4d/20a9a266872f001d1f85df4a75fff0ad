package com.kronsoft.project.service;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.kronsoft.project.dao.ProductRepository;
import com.kronsoft.project.dto.ProductDto;
import com.kronsoft.project.dto.StockDto;
import com.kronsoft.project.entities.Product;
import com.kronsoft.project.entities.Stock;

@Service
@Transactional
public class ProductService {

	private static Logger logger = LoggerFactory.getLogger(ProductService.class);
	
	@Autowired
	private ProductRepository productRepository;
	
	public void populateProductTable() {
		
		try {
			if(productRepository.count() == 0) {
				
				Resource resource = new ClassPathResource("products.csv");
				CsvSchema schema = CsvSchema.emptySchema().withHeader();
				CsvMapper mapper = new CsvMapper();
				MappingIterator<Product> iterator = mapper.readerFor(Product.class).with(schema)
						.readValues(resource.getInputStream());
				List<Product> products = productRepository.saveAll(iterator.readAll());
				System.out.println(products);
				
			}
			
		} catch(IOException e){
			
			logger.error("An error occurred while populating products table.", e);
			
		}
		
	}
	
	public List<ProductDto> getAllProductsDto() {
		
		return productRepository.findAll().stream() 
				.map(this::convertToProductDto).toList();
		
	}
	
	public ProductDto getProductDtoById(String id) {
		
		return convertToProductDto(productRepository.findById(id).get());
		
	}
	
	public List<ProductDto> getProductDtoByName(String productName) {
		
		return productRepository.findByProductName(productName).stream() 
				.map(this::convertToProductDto).toList();
		
	}
	
	public ProductDto saveProductDto(ProductDto productDto) {
		
		Product product = convertToProduc(productDto);
		
		return convertToProductDto(productRepository.save(product));
		
	}
	
	public void deleteProductById(String id) {
		
		productRepository.deleteById(id);
		
	}
	
	private ProductDto convertToProductDto(Product product) {
		
		ProductDto productDto = new ProductDto();
		BeanUtils.copyProperties(product, productDto);
		
		return productDto;
	}

	private Product convertToProduc(ProductDto productDto) {
		
		Product product = new Product();
		BeanUtils.copyProperties(product, productDto);
		
		return product;
	}
}
